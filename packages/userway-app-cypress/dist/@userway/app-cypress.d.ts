// Generated by dts-bundle-generator v8.0.1

// Generated by dts-bundle-generator v8.0.1
export type IgnoreElements = Array<string>;
declare enum Level {
	A = "A",
	AA = "AA",
	AAA = "AAA",
	BestPractice = "Best Practice",
	Experimental = "Experimental"
}
export type Severity = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
export type MultipleErrors = Record<string, string>;
export type ErrorHandle<T> = T extends MultipleErrors ? T : string;
export type RuleDescriptor<Error> = {
	description: string;
	display: string;
	errorMessage: ErrorHandle<Error>;
	fixable: boolean;
	id: number;
	level: Level;
	key: string;
	references: Array<{
		label: string;
		url: string;
	}>;
	recommendation: ErrorHandle<Error>;
	severity: Severity;
};
declare enum IssueType {
	violation = "violation",
	inapplicable = "inapplicable",
	incomplete = "incomplete"
}
export type TargetElement = Element | Document;
export interface Issue<T extends TargetElement = Element> {
	element: T;
	fingerprint: string;
	screenshotPath?: string;
	selector: string;
	snippet?: string;
	type: IssueType;
	variant?: string;
	xpath: string;
}
export type Descriptor = RuleDescriptor<any>;
export type Base = {
	actIds?: string[];
	description?: string;
	id: string;
	level?: RuleLevel;
	outputType?: OutputType;
	severity?: SeverityRange;
	uwId?: number;
};
declare enum RuleLevel {
	A = "A",
	AA = "AA",
	AAA = "AAA",
	BestPractice = "Best Practice",
	Experimental = "Experimental"
}
export type SeverityRange = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
export type OutputType = undefined | "group" | "tbd";
export type RuleSpecificOptions = {
	emptyAltAsPresentationalRole: boolean;
};
export interface RuleAnalyzeResult<T extends TargetElement> {
	count: AnalyzeCount;
	issues: Issue<T>[];
	issuesGroup: Record<string, Issue<T>[]>;
}
export type AnalyzeCountType = "reviewed" | "passed" | keyof typeof IssueType;
export type AnalyzeCount = Record<AnalyzeCountType, number>;
export type Rule<T extends TargetElement = TargetElement> = {
	actIds?: Base["actIds"];
	analyze: (ruleSpecificOptions?: RuleSpecificOptions, root?: Document | Element) => RuleAnalyzeResult<T>;
	description: Descriptor["description"];
	display: Descriptor["display"];
	errorMessage: Descriptor["errorMessage"];
	id: Base["id"];
	level: Descriptor["level"];
	outputType?: Base["outputType"];
	recommendation: Descriptor["recommendation"];
	references: Descriptor["references"];
	severity: Descriptor["severity"];
	uwId: Base["uwId"];
};
export interface AnalysisConfig {
	includeRules?: string[];
	excludeRules?: string[];
	includeBestPractices?: boolean;
	includeExperimental?: boolean;
	level?: "A" | "AA" | "AAA" | null;
	ignoreSelectors?: IgnoreElements;
	switchOff?: boolean;
	ruleSpecificOptions?: RuleSpecificOptions;
}
declare enum Outcome {
	passed = "passed",
	failed = "failed",
	inapplicable = "inapplicable",
	cantTell = "cantTell"
}
export type AnalyzeResultRecord = RuleAnalyzeResult<any> & {
	description: Rule["description"];
	errorMessage: Rule["errorMessage"];
	level: Rule["level"];
	display: Rule["display"];
	outcome: Outcome;
	outputType: OutputType;
	recommendation: Rule["recommendation"];
	ruleId: Rule["id"];
};
export type AnalyzeResult = Record<string, AnalyzeResultRecord>;
export declare enum RulesIds {
	Accesskeys = "accesskeys",
	AreaAlt = "area-alt",
	AriaAllowedAttr = "aria-allowed-attr",
	AriaAllowedRole = "aria-allowed-role",
	AriaCommandName = "aria-command-name",
	AriaDialogName = "aria-dialog-name",
	AriaHiddenBody = "aria-hidden-body",
	AriaHiddenFocus = "aria-hidden-focus",
	AriaInputFieldName = "aria-input-field-name",
	AriaMeterName = "aria-meter-name",
	AriaProgressbarName = "aria-progressbar-name",
	AriaRequiredAttr = "aria-required-attr",
	AriaRequiredChildren = "aria-required-children",
	AriaRequiredParent = "aria-required-parent",
	AriaRoledescription = "aria-roledescription",
	AriaRoles = "aria-roles",
	AriaText = "aria-text",
	AriaToggleFieldName = "aria-toggle-field-name",
	AriaTooltipName = "aria-tooltip-name",
	AriaTreeitemName = "aria-treeitem-name",
	AriaValidAttr = "aria-valid-attr",
	AriaValidAttrValue = "aria-valid-attr-value",
	AudioCaption = "audio-caption",
	AutocompleteValid = "autocomplete-valid",
	AvoidInlineSpacing = "avoid-inline-spacing",
	Blink = "blink",
	Bold = "bold",
	ButtonName = "button-name",
	Bypass = "bypass",
	ColorContrast = "color-contrast",
	ColorContrastEnhanced = "color-contrast-enhanced",
	CssOrientationLock = "css-orientation-lock",
	CustomFocusableElements = "custom-focusable-elements",
	DefinitionList = "definition-list",
	Dlitem = "dlitem",
	DocumentTitle = "document-title",
	DuplicateId = "duplicate-id",
	DuplicateIdActive = "duplicate-id-active",
	DuplicateIdAria = "duplicate-id-aria",
	EmptyHeading = "empty-heading",
	EmptyTableHeader = "empty-table-header",
	FieldsetLegend = "fieldset-legend",
	FocusOrderSemantics = "focus-order-semantics",
	FormFieldMultipleLabels = "form-field-multiple-labels",
	FrameFocusableContent = "frame-focusable-content",
	FrameTitle = "frame-title",
	FrameTitleUnique = "frame-title-unique",
	HeadingOrder = "heading-order",
	HiddenContent = "hidden-content",
	HtmlHasLang = "html-has-lang",
	HtmlLangValid = "html-lang-valid",
	HtmlXmlLangMismatch = "html-xml-lang-mismatch",
	IdenticalLinksSamePurpose = "identical-links-same-purpose",
	ImageAlt = "image-alt",
	ImageAltLong = "image-alt-long",
	ImageAltSuspicious = "image-alt-suspicious",
	ImageLinkWithoutText = "image-link-without-text",
	ImageRedundantAlt = "image-redundant-alt",
	ImageSameAlt = "image-same-alt",
	InputButtonName = "input-button-name",
	InputImageAlt = "input-image-alt",
	InvalidId = "invalid-id",
	Italic = "italic",
	Label = "label",
	LabelContentNameMismatch = "label-content-name-mismatch",
	LabelTitleOnly = "label-title-only",
	LandmarkBannerIsTopLevel = "landmark-banner-is-top-level",
	LandmarkComplementaryIsTopLevel = "landmark-complementary-is-top-level",
	LandmarkContentinfoIsTopLevel = "landmark-contentinfo-is-top-level",
	LandmarkMainIsTopLevel = "landmark-main-is-top-level",
	LandmarkNoDuplicateBanner = "landmark-no-duplicate-banner",
	LandmarkNoDuplicateContentinfo = "landmark-no-duplicate-contentinfo",
	LandmarkNoDuplicateMain = "landmark-no-duplicate-main",
	LandmarkOneMain = "landmark-one-main",
	LandmarkUnique = "landmark-unique",
	LinkAmbiguousText = "link-ambiguous-text",
	LinkInTextBlock = "link-in-text-block",
	LinkName = "link-name",
	LinkNoMentionTargetBlank = "link-no-mention-target-blank",
	LinkReferToImage = "link-refer-to-image",
	List = "list",
	Listitem = "listitem",
	Marquee = "marquee",
	MetaRefresh = "meta-refresh",
	MetaRefreshNoExceptions = "meta-refresh-no-exceptions",
	MetaViewport = "meta-viewport",
	MetaViewportLarge = "meta-viewport-large",
	NestedInteractive = "nested-interactive",
	NoAutoplayAudio = "no-autoplay-audio",
	NoAutoplayAudioNoExceptions = "no-autoplay-audio-no-exceptions",
	ObjectAlt = "object-alt",
	PAsHeading = "p-as-heading",
	PageHasHeadingOne = "page-has-heading-one",
	PresentationRoleConflict = "presentation-role-conflict",
	Region = "region",
	RoleImgAlt = "role-img-alt",
	ScopeAttrValid = "scope-attr-valid",
	ScrollableRegionFocusable = "scrollable-region-focusable",
	SelectName = "select-name",
	ServerSideImageMap = "server-side-image-map",
	SkipLink = "skip-link",
	SvgImgAlt = "svg-img-alt",
	Tabindex = "tabindex",
	TableDuplicateName = "table-duplicate-name",
	TableFakeCaption = "table-fake-caption",
	TargetSize = "target-size",
	TdHasHeader = "td-has-header",
	TdHeadersAttr = "td-headers-attr",
	ThHasDataCells = "th-has-data-cells",
	ValidLang = "valid-lang",
	VideoCaption = "video-caption"
}
// Generated by dts-bundle-generator v8.0.1
export type AnalysisReportMeta = {
	date: string;
	framework: Framework;
	htmlOrigin: string;
	relativePath: string;
	test: string[];
	url: string;
};
export type Framework = "Cypress" | "Playwright" | "Puppeteer";
export type ScreenshotsMetadata = Record<string, Record<string, string>> | null;
export type LaunchConfig = AnalysisConfig & {
	failInapplicable?: boolean;
	failIncomplete?: boolean;
};
export type LaunchResultData = {
	meta: AnalysisReportMeta;
	violations: AnalyzeResultRecord[];
	fullReport: AnalyzeResult;
};
export type ReportFileFormats = "json" | "html" | "csv";
export interface SaveReportConfig {
	body: Array<AnalyzeResultRecord>;
	meta: AnalysisReportMeta;
	format?: ReportFileFormats;
	reportPath: string;
	screenshotsMeta?: ScreenshotsMetadata;
}
declare function saveReport({ body, format, reportPath, screenshotsMeta, meta, }: SaveReportConfig): Cypress.Chainable<null>;
export type AnalyzeConfig = LaunchConfig & {
	strict?: boolean;
	screenshots?: boolean;
	reportPath?: string;
	saveReport?: ReportFileFormats;
	ignoreUrls?: RegExp[];
	onResult?: (data: LaunchResultData) => void | Cypress.Chainable<unknown>;
};
export declare const setupUserway: (configOverride: AnalyzeConfig) => void;
declare function analyze(config?: Omit<AnalyzeConfig, "reportPath">): Cypress.Chainable<{
	screenshotsMeta: {};
	meta: AnalysisReportMeta;
	violations: AnalyzeResultRecord[];
	fullReport: AnalyzeResult;
}>;
declare global {
	export namespace Cypress {
		interface Chainable {
			userwayAnalysis: typeof analyze;
			userwaySaveReport: typeof saveReport;
		}
	}
}
export type AnalyzeFn = typeof analyze;
export type SaveReportFn = typeof saveReport;
export type SetupUserwayFn = typeof setupUserway;

export {};
